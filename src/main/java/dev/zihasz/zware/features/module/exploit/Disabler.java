package dev.zihasz.zware.features.module.exploit;

import dev.zihasz.zware.event.events.PacketEvent;
import dev.zihasz.zware.features.module.Category;
import dev.zihasz.zware.features.module.Module;
import dev.zihasz.zware.features.setting.Setting;
import dev.zihasz.zware.utils.player.PlayerUtils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketKeepAlive;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.apache.commons.lang3.RandomUtils;

import java.util.ArrayList;
import java.util.List;

public class Disabler extends Module {

	private final List<CPacketConfirmTransaction> transactionList = new ArrayList<>();

	private final Setting<Mode> modeSetting = new Setting<>("Mode", "The way to try and disable the anti-cheat.", Mode.Motion);
	private final Setting<Boolean> packetConfirmTransaction = new Setting<>("CPacketConfirmTransaction", "Cancel and send confirm transaction packets later.", true);
	private final Setting<Boolean> packetKeepAlive = new Setting<>("CPacketKeepAlive", "Change the ID of keep alive packets.", true);

	private int transactions = 0;

	public Disabler() {
		super("Disabler", "anticheat :cold:", Category.EXPLOITS);
	}

	@Override
	public void onEnable() {
		mc.player.ticksExisted = 0;
	}

	@Override
	public void onUpdate() {
		if (nullCheck()) return;

		mc.player.connection.sendPacket(new CPacketKeepAlive(0));

		if (mc.player.ticksExisted % 5 == 0) {
		}
		if (mc.player.ticksExisted % 20 == 0) {
		}
		if (mc.player.ticksExisted % 60 == 0) {
			if (modeSetting.getValue() == Mode.Motion) {
				double x = mc.player.posX;
				double y = mc.player.posY;
				double z = mc.player.posZ;
				mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.lastTickPosX, mc.player.lastTickPosY, mc.player.lastTickPosZ, false));
				mc.player.connection.sendPacket(new CPacketPlayer.Position(x - PlayerUtils.getDiffX() / 2D, y - PlayerUtils.getDiffY() / 2D, z - PlayerUtils.getDiffZ() / 2D, true));
				mc.player.connection.sendPacket(new CPacketPlayer.Position(x, y, z, true));
			}
		}
		if (mc.player.ticksExisted % 120 == 0 && transactionList.size() > transactions && packetConfirmTransaction.getValue()) {
			mc.player.connection.sendPacket(transactionList.get(transactions++));
		}
		if (mc.player.ticksExisted % 600 == 0 && packetConfirmTransaction.getValue()) {
			transactionList.clear();
			transactions = 0;
		}
	}

	@SubscribeEvent
	public void onPacketSend(PacketEvent.Send event) {
		Packet<?> raw = event.getPacket();
		if (raw instanceof CPacketConfirmTransaction && packetConfirmTransaction.getValue()) {
			transactionList.add((CPacketConfirmTransaction) raw);
			event.setCanceled(true);
		}
		if (raw instanceof CPacketKeepAlive && packetKeepAlive.getValue()) {
			CPacketKeepAlive packet = (CPacketKeepAlive) raw;
			packet.key -= RandomUtils.nextInt(1, 2147483647);
		}
	}

	@Override
	public void onDisable() {
		transactionList.clear();
		transactions = 0;
	}

	private enum Mode {
		Simple,
		Motion,
	}

}
