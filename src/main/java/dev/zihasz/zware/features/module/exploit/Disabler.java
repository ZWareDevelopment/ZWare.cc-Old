package dev.zihasz.zware.features.module.exploit;

import dev.zihasz.zware.event.events.PacketEvent;
import dev.zihasz.zware.features.module.Category;
import dev.zihasz.zware.features.module.Module;
import dev.zihasz.zware.features.setting.Setting;
import dev.zihasz.zware.utils.misc.Timer;
import dev.zihasz.zware.utils.networking.PacketUtils;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.apache.commons.lang3.RandomUtils;

import java.util.ArrayList;
import java.util.List;

public class Disabler extends Module {

	private final Timer attackTimer = new Timer();
	private final List<CPacketConfirmTransaction> transactionList = new ArrayList<>();
	private final List<CPacketEntityAction> entityActionList = new ArrayList<>();
	private final List<CPacketUseEntity> useEntityList = new ArrayList<>();

	private final Setting<Boolean> packetCustomPayload = new Setting<>("CPacketCustomPayload", "Manipulate CPacketCustomPayload packets", true);
	private final Setting<Boolean> packetPlayer = new Setting<>("CPacketPlayer", "Manipulate CPacketPlayer packets", true);
	private final Setting<Boolean> packetConfirmTransaction = new Setting<>("CPacketConfirmTransaction", "Manipulate CPacketConfirmTransaction packets", true);
	private final Setting<Boolean> packetKeepAlive = new Setting<>("CPacketKeepAlive", "Manipulate CPacketKeepAlive packets", true);
	private final Setting<Boolean> packetEntityAction = new Setting<>("CPacketEntityAction", "Manipulate CPacketEntityAction packets", false);
	private final Setting<Boolean> packetUseEntity = new Setting<>("CPacketUseEntity", "Manipulate CPacketUseEntity packets", false);

	private int transactions = 0;
	private int entityActions = 0;
	private int useEntities = 0;

	public Disabler() {
		super("Disabler", "anticheat :cold:", Category.EXPLOITS);
	}

	@Override
	public void onEnable() {
		mc.player.ticksExisted = 0;
	}

	@Override
	public void onUpdate() {
		mc.player.connection.sendPacket(new CPacketKeepAlive(0));

		if (attackTimer.passedMS(RandomUtils.nextLong(10, 100)) && useEntityList.size() > useEntities && packetUseEntity.getValue()) {
			mc.player.connection.sendPacket(useEntityList.get(useEntities++));
			attackTimer.reset();
		}
		if (mc.player.ticksExisted % 25 == 0 && packetPlayer.getValue()) {
			mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + RandomUtils.nextFloat(100, 1000), mc.player.posZ, true));
		}
		if (mc.player.ticksExisted % 50 == 0 && entityActionList.size() > entityActions && packetEntityAction.getValue()) {
			mc.player.connection.sendPacket(entityActionList.get(entityActions++));
		}
		if (mc.player.ticksExisted % 120 == 0 && transactionList.size() > transactions && packetConfirmTransaction.getValue()) {
			mc.player.connection.sendPacket(transactionList.get(transactions++));
		}
		if (mc.player.ticksExisted % 600 == 0 && packetConfirmTransaction.getValue()) {
			transactionList.clear();
			transactions = 0;
		}
	}

	@SubscribeEvent
	public void onPacketSend(PacketEvent.Send event) {
		Packet<?> raw = event.getPacket();
		if (raw instanceof CPacketCustomPayload && packetCustomPayload.getValue()) {
			CPacketCustomPayload pay = (CPacketCustomPayload) raw;
			if (pay.getChannelName().equalsIgnoreCase("MC|Brand")) {
				mc.player.connection.sendPacket(PacketUtils.generatePayload("REGISTER", "Lunar-Client"));
			}
		}
		if (raw instanceof CPacketPlayer && packetPlayer.getValue()) {
			CPacketPlayer packet = (CPacketPlayer) raw;
			mc.player.connection.sendPacket(new CPacketInput());
			if (mc.player.ticksExisted % 15 == 0) {
				packet.y += RandomUtils.nextDouble(100, 1000);
				mc.player.connection.sendPacket(PacketUtils.generatePayload("matrix:geyser", mc.player.getGameProfile().getName()));
			}
		}
		if (raw instanceof CPacketConfirmTransaction && packetConfirmTransaction.getValue()) {
			transactionList.add((CPacketConfirmTransaction) raw);
			event.setCanceled(true);
		}
		if (raw instanceof CPacketKeepAlive && packetKeepAlive.getValue()) {
			CPacketKeepAlive packet = (CPacketKeepAlive) raw;
			packet.key -= RandomUtils.nextInt(1, 2147483647);
		}
		if (raw instanceof CPacketEntityAction && packetEntityAction.getValue()) {
			CPacketEntityAction packet = (CPacketEntityAction) raw;
			if (packet.getAction() == CPacketEntityAction.Action.START_SNEAKING)
				mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
			entityActionList.add(packet);
			event.setCanceled(true);
		}
		if (raw instanceof CPacketUseEntity && packetUseEntity.getValue()) {
			CPacketUseEntity packet = (CPacketUseEntity) raw;
			Entity entity = packet.getEntityFromWorld(mc.world);
			assert entity != null;
			if (packet.getAction() == CPacketUseEntity.Action.ATTACK && entity instanceof EntityEnderCrystal) {
				mc.player.connection.sendPacket(new CPacketUseEntity(entity));
			}
			useEntityList.add(packet);
			event.setCanceled(true);
		}
	}

	@Override
	public void onDisable() {
		transactionList.clear();
		entityActionList.clear();
		useEntityList.clear();
		transactions = 0;
		entityActions = 0;
		useEntities = 0;
		attackTimer.reset();
	}

}
