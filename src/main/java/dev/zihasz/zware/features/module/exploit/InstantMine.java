package dev.zihasz.zware.features.module.exploit;

import dev.zihasz.zware.event.events.BlockEvent;
import dev.zihasz.zware.event.events.PacketEvent;
import dev.zihasz.zware.features.module.Category;
import dev.zihasz.zware.features.module.Module;
import dev.zihasz.zware.features.setting.Setting;
import dev.zihasz.zware.utils.misc.Timer;
import dev.zihasz.zware.utils.render.Renderer3D;
import dev.zihasz.zware.utils.world.WorldUtils;
import net.minecraft.init.Items;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.awt.*;

public class InstantMine extends Module {

	private boolean packetCancel = false;
	private BlockPos renderBlock;
	private BlockPos lastBlock;
	private Timer timer = new Timer();
	private EnumFacing direction;

	private Setting<Boolean> autoBreak = new Setting<>("AutoBreak", "idfk ig", true);
	private Setting<Integer> delay = new Setting<>("Delay", "Delay between breaks ig.", 20, 0, 500);
	private Setting<Boolean> picOnly = new Setting<>("PickaxeOnly", "Only when using a pickaxe.", true);

	public InstantMine() {
		super("InstantMine", "Also known as CivBreaker", Category.EXPLOITS);
	}

	@Override
	public void onUpdate() {
		if (renderBlock != null) {
			if (autoBreak.getValue() && timer.passedMS(delay.getValue())) {
				if (picOnly.getValue() && !(mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem() == Items.DIAMOND_PICKAXE))
					return;
				mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK,
						renderBlock, direction));
				timer.reset();
			}
		}
		mc.playerController.blockHitDelay = 0;
	}

	@Override
	public void onRender3D(RenderWorldLastEvent event) {
		if (renderBlock != null) {
			Renderer3D.drawBBFill(new AxisAlignedBB(renderBlock), new Color(255, 255, 255, 40));
		}
	}

	public BlockPos getTarget() {
		return renderBlock;
	}
	public void setTarget(BlockPos pos) {
		renderBlock = pos;
		packetCancel = false;
		mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK,
				pos, EnumFacing.DOWN));
		packetCancel = true;
		mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK,
				pos, EnumFacing.DOWN));
		direction = EnumFacing.DOWN;
		lastBlock = pos;
	}

	@SubscribeEvent
	public void onPacketSend(PacketEvent.Send event) {
		Packet<?> packet = event.getPacket();
		if (packet instanceof CPacketPlayerDigging) {
			CPacketPlayerDigging digPacket = (CPacketPlayerDigging) packet;
			if (((CPacketPlayerDigging) packet).getAction() == CPacketPlayerDigging.Action.START_DESTROY_BLOCK && packetCancel)
				event.cancel();
		}
	}

	@SubscribeEvent
	public void onPacketRead(BlockEvent.Damage event) {
		if (WorldUtils.canBreak(event.getBlockPos())) {

			if (lastBlock == null || event.getBlockPos().x != lastBlock.x || event.getBlockPos().y != lastBlock.y || event.getBlockPos().z != lastBlock.z) {
				packetCancel = false;
				mc.player.swingArm(EnumHand.MAIN_HAND);
				mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK,
						event.getBlockPos(), event.getFace()));
				packetCancel = true;
			} else {
				packetCancel = true;
			}
			//Command.sendChatMessage("Breaking");
			mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK,
					event.getBlockPos(), event.getFace()));

			renderBlock = event.getBlockPos();
			lastBlock = event.getBlockPos();
			direction = event.getFace();

			event.cancel();

		}
	}
}
